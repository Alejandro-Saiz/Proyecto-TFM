# -*- coding: utf-8 -*-
"""Vision_Vehiculo_Autonomo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ogvhJyxN-apQWKU2NQSl5-JuOnTGGbyO

Se prepara el entorno, descargando en primer lugar la red neuronal convolucional YOLOv5
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5  # clone repo
!pip install -qr yolov5/requirements.txt  # install dependencies (ignore errors)
# %cd yolov5

import torch
from IPython.display import Image, clear_output  # to display images
from utils.google_utils import gdrive_download   # to download models/datasets

clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

"""Se cargan las librerias adicionales necesarias"""

import glob
import csv
import cv2

from os import remove
from time import time
from IPython.display import Image, display
from argparse import ArgumentParser

"""Se deja preparada la red de Regresion y la YOLOv5 cargando las configuraciones de ambas, incluyendo en la carpeta de la red YOLO los archivos modificados

"""

# Commented out IPython magic to ensure Python compatibility.
# %cp /arch_mod/Resultados_CSV.csv /content/yolov5

# Commented out IPython magic to ensure Python compatibility.
# Se copia el peso del drive al colab
# %cp /arch_mod/best.pt /content/yolov5

# Se cargan mis archivos modificados del YOLO
remove("/content/yolov5/detect.py")
remove("/content/yolov5/utils/plots.py")

# Commented out IPython magic to ensure Python compatibility.
# %cp /arch_mod/detect.py /content/yolov5
# %cp /arch_mod/plots.py /content/yolov5/utils

"""Las imagenes o video que se quiera analizar se incluyen tambien en la carpeta de la red YOLO"""

# Commented out IPython magic to ensure Python compatibility.
# Se carga el elemento/s que se quiere analizar
# %cp -r /arch_mod/img_test /content/yolov5

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov5/

"""Comando para ejecutar el programa con un video como entrada"""

# Se ejecuta la red con un video
!python detect.py --weights best.pt --conf 0.4 --source TestR1.mp4

"""Comando para ejecutar el programa con imagenes como entrada"""

# Se ejecuta la red solo con imagenes
!python detect.py --weights best.pt --img 416 --conf 0.4 --source img_test/ --save-txt

"""Pasa por pantalla todas las imagenes una vez han sido procesadas por la red"""

for imageName in glob.glob('/content/yolov5/runs/detect/exp2/*.jpg'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")

"""En caso de analizar un video, con esta funcion se calculan los fotogramas por segundo que logra la red """

# Esta función cuenta los cuadros en un video básicamente contándolos manualmente.
def count_frames_manually(video):
    frame_count = 0

    # Iteraremos sobre cada "frame" en el video, incrementando el conteo.
    while True:
        frame_was_read, _ = video.read()

        # Dejamos de iterar cuando ya no haya más cuadros en el video.
        if not frame_was_read:
            return frame_count

        frame_count += 1

video = cv2.VideoCapture('/content/yolov5/v_Test1R.mp4')

total_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))

total_frames2 = count_frames_manually(video)

print(f'Número de cuadros en el video: {total_frames}')
print(f'Número de cuadros en el video: {total_frames2}')

if total_frames == total_frames2:
  frames_FN = total_frames
else:
  print("Los frames de ambas medidas no coinciden")

"""Tiempo por frame y FPS"""

# Para medir tiempo de ejecucio del programa y FPS
start_time = time()
!python detect.py --weights best.pt --img 416 --conf 0.4 --source  v_Test3R.mp4
end_time = time()

print("Total time = "+str(end_time - start_time)+ "\nTimer per Frame = "+str((end_time-start_time)/frames_FN))

# FPS
print("FPS = "+str(frames_FN/(end_time-start_time)))

"""Que GPU se esta usando"""

!nvidia-smi